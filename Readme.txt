0.编程架构： （最后注释会写清楚 哪个哪个是用来干嘛的）

  分层：
    驱动层（去耦合）
    数据处理层
    具体控制应用层

  状态机/接口：
    封装接口
    状态机管理
    只需要修改驱动就可以无缝移植
    调用时只需要读取接口即可 而无需专门翻驱动

  事件驱动：
    触发中断
    回调函数
    事件触发对应的模式

1.待完成的代码内容:

  手柄的驱动        √
  陀螺仪的驱动      √
  简易串口调试      √
  电源电压测量      √
  达妙电机驱动      √
  pid控制平衡       
  遥控相关代码      
  切换模式的面板    
  视觉处理          


2.解释一下各个文件夹:
(最后会进行统一的驱动文件管理，keil适配，makefile cmake也会以后学习)

  .vscode vscode工作区相关文件夹
  Control 个人写的驱动封装 未整理
  DMH3510(F4) 达妙科技的CAN电机驱动 未了解如何使用

  Core HAL官方生成的主代码
  Drivers HAL官方驱动库
  EIDE vscode开发用的EIDE插件的工作区
  MDK-ARM keil相关文件夹

  Middlewares.ST.USB_HOST CubeMX中加载的USB驱动库 
  USB_HOST USB无线连接的驱动库        
  WHEELTEC_BSP为具体手柄控制的驱动


3.移植方式 ： 

  手柄：Cubemx中按照这个cubemx设置相应的USB-FS USB-HOST 然后下面前两个驱动库会生成 然后把bsp_ps2.c .h复制过去修改一下配置
  其他的移植就移植control里面的驱动 然后读取main.c 以及那几个函数 把控制方式移植


4.代码注意：

  记得先串口打印重定向 避免手柄调试的时候出现printf错误
  读bsp_ps2.c的最后一个函数来去读取手柄的数据 使用了结构体作为对外读取的接口 记得进行处理 extern的问题


5.需要学习

  驱动封装的一堆问题
  回调函数 触发中断 完成中断
  DMA UART相关的收发驱动的处理
